/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.29
 * Generated at: 2018-06-06 19:49:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("javax.naming.Context");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
// Create a new connection to database
    Context initCtx = new InitialContext();
    Context envCtx = (Context) initCtx.lookup("java:comp/env");
    DataSource ds = (DataSource) envCtx.lookup("jdbc/moviedb");

    Connection connection = ds.getConnection();


    PreparedStatement statement = null;

    // Retrieve parameter "name" from the http request, which refers to the value of <input name="name"> in index.html
    String title = request.getParameter("title");
    String[] parts = title.split(" ");
    String combined = "";
    for(int i = 0; i < parts.length;i++) {
        combined += "+" + parts[i] + "* ";
    }
    double tempMatch = Math.floorDiv(title.length(),3);
    int match = (int) tempMatch;


    String sort = request.getParameter("sort");
    String genre = request.getParameter("genre");
    String firstChar = request.getParameter("char");
    String y = request.getParameter("year");
    int year = 0;
    String initial = request.getParameter("initial");
    int initialPage = Integer.parseInt(initial);
    int ini = initialPage;
    if(y!="")
    {
        year = Integer.parseInt(y);
    }
    String director = request.getParameter("director");
    String star = request.getParameter("star");
    String pages = request.getParameter("pages");
    int pageNum = Integer.parseInt(pages);
    String qtitle = "%" + title + "%";
    String qdirector = "%" + director + "%";
    String qstar = "%" + star + "%";
    String qgenre = "%" + genre + "%";
    String qFirstChar = firstChar + "%";
    if(!firstChar.equals(""))
    {
        qtitle = qFirstChar;
    }
    initialPage=initialPage*pageNum;

    // Generate a SQL query
    String query = "";
    if(y.equals(""))
    {
        if(genre.equals("")) {
            if (sort.equals("ta")) {

                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \',\') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \',\') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);

            } else if (sort.equals("td")) {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);

            } else if (sort.equals("ra")) {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);


            } else if (sort.equals("rd")) {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);
            }
        }
        else {
            if (sort.equals("ta")) {
                //                query = String.format("SELECT * FROM movies WHERE movies.title LIKE '%s'AND movies.director LIKE '%s'", title,director);
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);
                statement.setString(8,genre);

            } else if (sort.equals("td")) {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);
                statement.setString(8,genre);

            } else if (sort.equals("ra")) {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);
                statement.setString(8,genre);

            } else if (sort.equals("rd")) {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2,title);
                statement.setInt(3,match);
                statement.setString(4,"%" + director + "%");
                statement.setString(5,"%" + star + "%");
                statement.setInt(6,pageNum);
                statement.setInt(7, initialPage);
                statement.setString(8,genre);
            }
        }
    }
    else
    {
        if(genre.equals("")) {
            if(sort.equals("ta"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setInt(7,pageNum);
                statement.setInt(8, initialPage);
            }
            else if(sort.equals("td"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setInt(7,pageNum);
                statement.setInt(8, initialPage);
            }
            else if(sort.equals("ra"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setInt(7,pageNum);
                statement.setInt(8, initialPage);
            }
            else if(sort.equals("rd"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setInt(7,pageNum);
                statement.setInt(8, initialPage);
            }
        }
        else {
            if(sort.equals("ta"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setString(7, genre);
                statement.setInt(8,pageNum);
                statement.setInt(9, initialPage);
            }
            else if(sort.equals("td"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY movies.title DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setString(7, genre);
                statement.setInt(8,pageNum);
                statement.setInt(9, initialPage);
            }
            else if(sort.equals("ra"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setString(7, genre);
                statement.setInt(8,pageNum);
                statement.setInt(9, initialPage);
            }
            else if(sort.equals("rd"))
            {
                query = "SELECT DISTINCT movies.id AS ID, rating AS rating, title AS title, year AS year, director AS director, GROUP_CONCAT(DISTINCT stars.name SEPARATOR \', \') AS stars, GROUP_CONCAT(DISTINCT genres.name SEPARATOR \', \') AS genres " +
                        "FROM movies " +
                        "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
                        "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
                        "INNER JOIN genres_in_movies ON genres_in_movies.movieId = movies.id " +
                        "INNER JOIN genres ON genres.id = genres_in_movies.genreId " +
                        "LEFT JOIN ratings ON ratings.movieId = movies.id " +
                        "WHERE (MATCH (title) AGAINST (? IN BOOLEAN MODE) OR movies.title IN (SELECT movies.title FROM movies WHERE (SELECT edth(LOWER(?), LOWER(movies.title), ? )) = 1)) AND movies.year = ? AND movies.director LIKE ? AND stars.name LIKE ? AND genres.name = ? " +
                        "GROUP BY movies.id, rating, title, year, director " +
                        "ORDER BY ratings.rating DESC " +
                        "LIMIT ? OFFSET ?";

                statement = connection.prepareStatement(query);
                statement.setString(1,combined);
                statement.setString(2, title);
                statement.setInt(3, match);
                statement.setInt(4, year);
                statement.setString(5,"%" + director + "%");
                statement.setString(6,"%" + star + "%");
                statement.setString(7, genre);
                statement.setInt(8,pageNum);
                statement.setInt(9, initialPage);
            }
        }
    }

    ResultSet rs = statement.executeQuery();
    ResultSetMetaData metadata = rs.getMetaData();



      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <!-- Required meta tags -->\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n");
      out.write("    <title>Fablix</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"search.css\">\n");
      out.write("\n");
      out.write("    <!-- jQuery library -->\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("    <!-- Optional theme -->\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("    <!-- Latest compiled and minified JavaScript -->\n");
      out.write("    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script>\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css?family=Merriweather:900|\n");
      out.write("        Raleway:500|Rubik|Philosopher:400|Inconsolata:400|Gugi:400|Muli|Anton|Mina\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("<div id=\"header\">\n");
      out.write("    <div class=\"logo\">\n");
      out.write("        <a class=\"home\" href=\"./\">Fablix</a>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"leftMenu\">\n");
      out.write("        <ul>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"moviesSelect\" href=\"./searching\">Advanced Search</a>\n");
      out.write("            </li>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"tv\" href=\"./browse\">Browse</a>\n");
      out.write("            </li>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"topRate\" href=\"./movielist\">Top 20 Rated</a>\n");
      out.write("            </li>\n");
      out.write("        </ul>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"rightMenu\">\n");
      out.write("        <ul>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"user\" href=\"./cart\">Checkout</a>\n");
      out.write("            </li>\n");
      out.write("        </ul>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("<div id=\"top20\">\n");
      out.write("    Search Results\n");
      out.write("</div>\n");
      out.write("<div id=\"movieTable\">\n");
      out.write("    <table border=\"1\">\n");
      out.write("        <div class=\"dropdown-content\">\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=td&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">Title Descending</a>\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=ta&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">Title Ascending</a>\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=rd&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">Rating Descending</a>\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=ra&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">Rating Ascending</a>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"dropdown-content\">\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=10&sort=");
      out.print(sort);
      out.write("&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">10</a>\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=25&sort=");
      out.print(sort);
      out.write("&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">25</a>\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=50&sort=");
      out.print(sort);
      out.write("&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">50</a>\n");
      out.write("            <a href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=100&sort=");
      out.print(sort);
      out.write("&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">100</a>\n");
      out.write("        </div>\n");
      out.write("        <tr>\n");
      out.write("            ");
 for(int i = 1; i <= metadata.getColumnCount(); i++) {
      out.write("\n");
      out.write("                <th>\n");
      out.write("                    ");
      out.print(metadata.getColumnName(i));
      out.write("\n");
      out.write("                </th>\n");
      out.write("            ");
}
      out.write("\n");
      out.write("            <th>\n");
      out.write("                Add to Cart\n");
      out.write("            </th>\n");
      out.write("        </tr>\n");
      out.write("        ");
while(rs.next()){
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            ");
for(int i=1; i<= metadata.getColumnCount();i++) {
      out.write("\n");
      out.write("            ");
if(i==3) { String movie = rs.getString(i); int tempYear = rs.getInt("year"); String yearr = Integer.toString(tempYear); String tempDir = rs.getString("director");
            
      out.write("<th><a href=\"./form?title=");
      out.print(movie);
      out.write("&year=");
      out.print(yearr);
      out.write("&director=");
      out.print(tempDir);
      out.write("&star=&pages=10&sort=");
      out.print(sort);
      out.write("&initial=0&genre=&char=\">");
      out.print(movie);
      out.write("</a></th>\n");
      out.write("            ");
} else if (i==6){
                String s = rs.getString(i);
                String [] star_values = s.split(",");
                ArrayList<String> sep_stars = new ArrayList<String>(Arrays.asList(star_values));
      out.write("<th>\n");
      out.write("                ");
for(int j=0; j< sep_stars.size();j++) {
                        String temp = sep_stars.get(j).trim();
      out.write("\n");
      out.write("                        <a href=\"./star?title=&year=&director=&star=");
      out.print(temp);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=");
      out.print(sort);
      out.write("&initial=0&genre=&char=\">");
      out.print(temp);
      out.write("</a>\n");
      out.write("                ");
}
      out.write("</th>\n");
      out.write("            ");
} else if(i==7) {
                String g = rs.getString(i);
                String [] genre_values = g.split(",");
                ArrayList<String> sep_genres = new ArrayList<String>(Arrays.asList(genre_values));
      out.write("<th>\n");
      out.write("                ");
for(int j=0; j < sep_genres.size();j++) {
                    String temp = sep_genres.get(j).replace(" ","");
      out.write("\n");
      out.write("                    <a href=\"./form?title=&year=&director=&star=&pages=");
      out.print(pageNum);
      out.write("&sort=");
      out.print(sort);
      out.write("&initial=0&genre=");
      out.print(temp);
      out.write("&char=\">");
      out.print(temp);
      out.write("</a>\n");
      out.write("                ");
}
      out.write("</th>\n");
      out.write("            ");
}else {
      out.write("\n");
      out.write("            <th>\n");
      out.write("                ");
      out.print(rs.getString(i));
      out.write("\n");
      out.write("            </th>\n");
      out.write("            ");
}
      out.write("\n");
      out.write("            ");
}
      out.write("\n");
      out.write("            <th>\n");
      out.write("                <form action=\"checkout\" method=\"get\">\n");
      out.write("                    <label for=\"add\">Enter quantity: </label>\n");
      out.write("                    <input type=\"number\" name=\"quantity\" id=\"add\" maxlength=\"2\" required=\"[1-9]\" min=\"1\" max=\"99\">\n");
      out.write("                    <input type=\"hidden\" name=\"movie\" value=\"");
      out.print(rs.getString("title"));
      out.write("\">\n");
      out.write("                    <input type=\"hidden\" name=\"remove\" value=\"\">\n");
      out.write("                    <input type=\"image\" name=\"addCart\" src=\"add.gif\" alt=\"Add to Cart\">\n");
      out.write("                    <img alt=\"\" width=\"1\" height=\"1\" src=\"add.gif\">\n");
      out.write("                </form>\n");
      out.write("            </th>\n");
      out.write("        </tr>\n");
      out.write("        ");
}
      out.write("\n");
      out.write("    </table>\n");
      out.write("    <nav aria-label=\"Page navigation\">\n");
      out.write("        <ul class=\"pagination\">\n");
      out.write("            <li class=\"page-item\"><a class=\"page-link\" href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=");
      out.print(sort);
      out.write("&initial=");
      out.print((ini-1));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">Previous</a></li>\n");
      out.write("            <li class=\"page-item\"><a class=\"page-link\" href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=");
      out.print(sort);
      out.write("&initial=");
      out.print((ini));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write('"');
      out.write('>');
      out.print(ini+1);
      out.write("</a></li>\n");
      out.write("            <li class=\"page-item\"><a class=\"page-link\" href=\"./form?title=");
      out.print(title);
      out.write("&year=");
      out.print(y);
      out.write("&director=");
      out.print(director);
      out.write("&star=");
      out.print(star);
      out.write("&pages=");
      out.print(pageNum);
      out.write("&sort=");
      out.print(sort);
      out.write("&initial=");
      out.print((ini+1));
      out.write("&genre=");
      out.print(genre);
      out.write("&char=");
      out.print(firstChar);
      out.write("\">Next</a></li>\n");
      out.write("        </ul>\n");
      out.write("\n");
      out.write("    </nav>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
rs.close();
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
