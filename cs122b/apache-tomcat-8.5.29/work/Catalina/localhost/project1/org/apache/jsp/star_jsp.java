/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.29
 * Generated at: 2018-06-06 19:49:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.Set;
import java.util.ArrayList;
import java.util.HashSet;
import javax.management.QueryEval;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public final class star_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("javax.management.QueryEval");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
// Create a new connection to database
    Context initCtx = new InitialContext();
    Context envCtx = (Context) initCtx.lookup("java:comp/env");
    DataSource ds = (DataSource) envCtx.lookup("jdbc/moviedb");

    Connection connection = ds.getConnection();






    String star = request.getParameter("star");

    String starQuery = "SELECT DISTINCT stars.name AS name, stars.birthYear AS year " +
            "FROM movies " +
            "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
            "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
            "WHERE stars.name = ? ";

    String starMovies = "SELECT DISTINCT title AS title, rating AS rating " +
            "FROM movies " +
            "INNER JOIN stars_in_movies ON stars_in_movies.movieId = movies.id " +
            "INNER JOIN stars ON stars.id = stars_in_movies.starId " +
            "LEFT JOIN ratings ON ratings.movieId = movies.id " +
            "WHERE stars.name = ? ";

    PreparedStatement statement = connection.prepareStatement(starQuery);
    PreparedStatement statement2 = connection.prepareStatement(starMovies);

    statement.setString(1,star);
    statement2.setString(1,star);

    // execute query
    ResultSet rs = statement.executeQuery();
    ResultSet rs2 = statement2.executeQuery();

    ResultSetMetaData metadata = rs.getMetaData();
    ResultSetMetaData metadata2 = rs2.getMetaData();
//
//    ArrayList<String> allGenres = new ArrayList<>();
//
//    while (rs.next()) {
//        String genres = rs.getString("name");
//        allGenres.add(genres);
//    }


      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <!-- Required meta tags -->\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n");
      out.write("    <title>Fablix</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"search.css\">\n");
      out.write("\n");
      out.write("    <!-- jQuery library -->\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("    <!-- Optional theme -->\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("    <!-- Latest compiled and minified JavaScript -->\n");
      out.write("    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script>\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css?family=Merriweather:900|\n");
      out.write("        Raleway:500|Rubik|Philosopher:400|Inconsolata:400|Gugi:400|Muli|Anton|Mina\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("<div id=\"header\">\n");
      out.write("    <div class=\"logo\">\n");
      out.write("        <a class=\"home\" href=\"./\">Fablix</a>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"leftMenu\">\n");
      out.write("        <ul>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"moviesSelect\" href=\"./searching\">Advanced Search</a>\n");
      out.write("            </li>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"tv\" href=\"./browse\">Browse</a>\n");
      out.write("            </li>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"topRate\" href=\"./movielist\">Top 20 Rated</a>\n");
      out.write("            </li>\n");
      out.write("        </ul>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"rightMenu\">\n");
      out.write("        <ul>\n");
      out.write("            <li>\n");
      out.write("                <a class=\"user\" href=\"./cart\">Checkout</a>\n");
      out.write("            </li>\n");
      out.write("        </ul>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("<div id=\"top20\">\n");
      out.write("    Star Page\n");
      out.write("</div>\n");
      out.write("<div id=\"movieTable\">\n");
      out.write("    <table border=\"1\">\n");
      out.write("        <tr>\n");
      out.write("            ");
 for(int i = 1; i <= metadata.getColumnCount(); i++) {
      out.write("\n");
      out.write("            <th>\n");
      out.write("                ");
      out.print(metadata.getColumnName(i));
      out.write("\n");
      out.write("            </th>\n");
      out.write("            ");
}
      out.write("\n");
      out.write("        </tr>\n");
      out.write("        ");
while(rs.next()){
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            ");
for(int i=1; i<= metadata.getColumnCount();i++) {
      out.write("\n");
      out.write("            ");
      out.write("\n");
      out.write("\n");
      out.write("            ");
      out.write("\n");
      out.write("            ");
      out.write("\n");
      out.write("            ");
if(rs.getString(i)==null) {
                String na = "Year Not Available";
      out.write("\n");
      out.write("                <th>\n");
      out.write("                    ");
      out.print(na);
      out.write("\n");
      out.write("                </th>\n");
      out.write("            ");
} else {
      out.write("\n");
      out.write("                <th>\n");
      out.write("                    ");
      out.print(rs.getString(i));
      out.write("\n");
      out.write("                </th>\n");
      out.write("            ");
}
      out.write("\n");
      out.write("        ");
}
      out.write("\n");
      out.write("        ");
}
      out.write("\n");
      out.write("        </tr>\n");
      out.write("    </table>\n");
      out.write("\n");
      out.write("    <table border=\"1\">\n");
      out.write("        <tr>\n");
      out.write("            ");
 for(int i = 1; i <= metadata2.getColumnCount(); i++) {
      out.write("\n");
      out.write("            <th>\n");
      out.write("                ");
      out.print(metadata2.getColumnName(i));
      out.write("\n");
      out.write("            </th>\n");
      out.write("            ");
}
      out.write("\n");
      out.write("        </tr>\n");
      out.write("    </br>\n");
      out.write("        ");
while(rs2.next()){
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            ");
for(int j=1; j <= metadata2.getColumnCount();j++) {
      out.write("\n");
      out.write("                ");
if(j == 1) {
      out.write("\n");
      out.write("                    <th>\n");
      out.write("                        <a href=\"./form?title=");
      out.print(rs2.getString(j));
      out.write("&year=&director=&star=&pages=10&sort=ta&initial=0&genre=&char=\">");
      out.print(rs2.getString(j));
      out.write("</a>\n");
      out.write("                    </th>\n");
      out.write("                ");
} else {
      out.write("\n");
      out.write("                    <th>\n");
      out.write("                        ");
      out.print(rs2.getString(j));
      out.write("\n");
      out.write("                    </th>\n");
      out.write("                ");
}
      out.write("\n");
      out.write("            ");
}
      out.write("\n");
      out.write("        ");
}
      out.write("\n");
      out.write("        </tr>\n");
      out.write("    </table>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
rs.close();
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
